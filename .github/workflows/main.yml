name: Django-app workflow

on: [push]

jobs:
  tests:
    name: PEP8 check
    # «Раннер» — создание изолированного окружения с последней версией Ubuntu 
    runs-on: ubuntu-latest

    steps:
    # Запуск actions checkout — готового скрипта 
    # для клонирования репозитория
    - uses: actions/checkout@v2
    - name: Set up Python
      # Запуск actions setup-python — готового скрипта 
      # для развёртывания окружения Python
      uses: actions/setup-python@v2
      with:
        # Выбор версии Python
        python-version: 3.7

    - name: Install dependencies
      run: | 
        # обновление pip
        python -m pip install --upgrade pip 
        # установка flake8 и его плагинов
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        # перейти в папку, содержащую requirements.txt
        cd backend/
        # установка зависимостей
        pip install -r requirements.txt

    - name: Test with flake8
      run: |
        # запуск проверки проекта по flake8
        python -m flake8 backend

  build_and_push_to_docker_hub:
    name: Push Docker images to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        # Проверка доступности репозитория Docker Hub для workflow
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        # Вызов сборщика контейнеров docker
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        # Запуск скрипта авторизации на Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push backend to Docker Hub
        # Пуш образа backend в Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          context: ./backend
          file: ./backend/Dockerfile
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram-backend:latest
      - name: Push frontend to Docker Hub
        # Пуш образа frontend в Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          context: ./frontend
          file: ./frontend/Dockerfile
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram-frontend:latest

  deploy:
    name: Deploying on remote server
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            sudo docker compose stop
            sudo docker compose rm backend
            sudo docker compose rm frontend
            
            sudo rm -f .env        
            sudo touch .env
            
            echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
            echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            
            sudo docker compose up -d --build

  send_message:
    name: Sending Telegram message
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен!!!